q: What happens when you initialize a repository? Why do you need to do it?

a: Initiating a repository places a .git folder, which is a hidden folder denoted by a period in front of it that contains in its folder metadata that does not need to be modified directly by the user. This is necessary to create a repository. You can then track the status of the repo with git status. 

q: How is the staging area different from the working directory and the repository? What value do you think it offers?

a: The staging area allows you to select specific files from the working directory so that the user can commit logical changes, or commit all the files in the working directory at once. 

q: How can you use the staging area to make sure you have one commit per logical change?

a: If a logical change has not been made in a working directory, then the user can select only the files which have a logical change made to be commited into the repository. 

q: What are some situations when branches would be helpful in keeping your history organized? How would branches help?

a: If you are adding new features and want to make a change to the code, then a branch can be made where master will not be affected by the changes made to the new branch. 

q: How do the diagrams help you visualize the branch structure?

a: The diagrams helps in visualizing how the stucture of the repository is laid out and helps stay orgainzed with commits and allows users to add new branches in the correct area of an existing branch to trach those new changes or features. 

q: What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

a: Merging two branches will create a new master branch by first merging each parent commit to the new master and then removing the old branches. If you remove the branch before commiting, then you loose access to the previous commits under that branch. 

q: What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?

a: The auto merging helps by combining two pieces of code intelligently while also being mindful of any changes made to functions that exist in both commits. Doing merges manually can be very tedious, but it allows the programmer to carefully merge two commits and add features carefully.